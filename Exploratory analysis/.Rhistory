df_outcome <- df_outcome[df_outcome$State == state,]
fname<-c("Joe", "Bob", "Bill", "Tom", "Sue","Sam","Jane","Ruby")
score<-c(500, 490, 500, 750, 550, 500, 210, 320)
dat<-data.frame(fname,score)
dat$rank <- NA
dat$rank[order(score)]
order(score)
score
df_outcome$rank <- NULL
View(df_outcome)
df_outcome$rank <- NULL
df_outcome$rank <- NA
df_outcome$rank[order(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)] <- 1:nrow(df_outcome)
View(df_outcome)
df_outcome$rank <- NA
df_outcome$rank <- rank(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
df_outcome$rank2 <- NA
df_outcome$rank2[order(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)] <- 1:nrow(df_outcome)
View(df_outcome)
df_outcome$rank <- rank(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack , na.last = T)
df_outcome$rank <- rank(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack , na.last = NA)
df_outcome$rank <- rank(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack , na.last = NA)
df_outcome$rank <- rank(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack , na.last = 'Keep')
df_outcome$rank <- rank(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack , na.last = 'keep')
df_outcome$rank <- rank(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack , na.last = 'keep')
df_outcome$rank <- rank(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack , na.last = "keep")
df_outcome$rank <- NA
df_outcome$rank <- rank(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack , na.last = "keep")
#Subset by state
df_outcome <- df_outcome[df_outcome$State == state,]
df_outcome$rank <- NA
df_outcome$rank <- rank(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack , na.last = "keep")
## Read outcome data
df_outcome <- read.csv("C:/Users/victo/Documents/Githut/Johns-Hopkins-DataScience/outcome-of-care-measures.csv", colClasses = 'character')
df_outcome <- df_outcome[,c(2,7,11,17,23)]
df_outcome[3:5] <- lapply(df_outcome[3:5], as.numeric) ## Fix numeric values
#Subset by state
df_outcome <- df_outcome[df_outcome$State == state,]
df_outcome$rank <- NA
df_outcome$rank <- rank(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack , na.last = "keep")
if (outcome == 'heart attack'){
df_outcome$rank <- rank(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack , na.last = "keep")
} else if (outcome == 'heart failure'){
df_outcome$rank <- rank(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure , na.last = "keep")
} else {
df_outcome$rank <- rank(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia , na.last = "keep")
}
answer <- df_outcome[df_outcome$rank == num]
answer <- df_outcome[df_outcome$rank == 2]
answer <- df_outcome[df_outcome$rank == 2,1]
answer <- df_outcome[df_outcome$rank == 1,1]
answer <- df_outcome[df_outcome$rank == 1,1]
answer <- df_outcome[df_outcome$rank == 1,2]
answer <- df_outcome[df_outcome$rank == '1',2]
answer <- df_outcome[df_outcome$rank < 2,2]
answer
answer <- df_outcome[df_outcome$rank < 2,]
answer
answer <- df_outcome[df_outcome$rank == 2,]
answer
## Read outcome data
df_outcome <- read.csv("C:/Users/victo/Documents/Githut/Johns-Hopkins-DataScience/outcome-of-care-measures.csv", colClasses = 'character')
df_outcome <- df_outcome[,c(2,7,11,17,23)]
df_outcome[3:5] <- lapply(df_outcome[3:5], as.numeric) ## Fix numeric values
#Subset by state
df_outcome <- df_outcome[df_outcome$State == state,]
df_outcome$rank <- NA
if (outcome == 'heart attack'){
df_outcome$rank <- rank(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack , na.last = "keep")
} else if (outcome == 'heart failure'){
df_outcome$rank <- rank(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure , na.last = "keep")
} else {
df_outcome$rank <- rank(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia , na.last = "keep")
}
answer <- df_outcome[df_outcome$rank == 2,]
answer <- df_outcome[df_outcome$rank = 2,]
answer <- df_outcome[df_outcome$rank == 2,]
answer <- df_outcome[which(df_outcome$rank == 2)]
answer <- df_outcome[which(df_outcome$rank == 2),]
answer
answer <- df_outcome[which(df_outcome$rank == 2),1]
answe
answer
rankhospital <- function(state, outcome, num) {
## Read outcome data
df_outcome <- read.csv("C:/Users/victo/Documents/Githut/Johns-Hopkins-DataScience/outcome-of-care-measures.csv", colClasses = 'character')
df_outcome <- df_outcome[,c(2,7,11,17,23)]
df_outcome[3:5] <- lapply(df_outcome[3:5], as.numeric) ## Fix numeric values
## Check state and outcome valid
if (!outcome %in% c('heart attack', 'heart failure', 'pneumonia')){
return(warning('Invalid Outcome'))
}else if (!state %in% df_outcome$State){
return(warning('Invalid State'))
}else{
#Subset by state
df_outcome <- df_outcome[df_outcome$State == state,]
df_outcome$rank <- NA
if (outcome == 'heart attack'){
df_outcome$rank <- rank(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack , na.last = "keep")
} else if (outcome == 'heart failure'){
df_outcome$rank <- rank(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure , na.last = "keep")
} else {
df_outcome$rank <- rank(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia , na.last = "keep")
}
answer <- df_outcome[which(df_outcome$rank == 2),1]
return (answer)
}
## Return hospital name in that state with the given rank
## 30-day death rate
}
rankhospital("TX", "heart failure", 4)
rankhospital <- function(state, outcome, num) {
## Read outcome data
df_outcome <- read.csv("C:/Users/victo/Documents/Githut/Johns-Hopkins-DataScience/outcome-of-care-measures.csv", colClasses = 'character')
df_outcome <- df_outcome[,c(2,7,11,17,23)]
df_outcome[3:5] <- lapply(df_outcome[3:5], as.numeric) ## Fix numeric values
## Check state and outcome valid
if (!outcome %in% c('heart attack', 'heart failure', 'pneumonia')){
return(warning('Invalid Outcome'))
}else if (!state %in% df_outcome$State){
return(warning('Invalid State'))
}else{
#Subset by state
df_outcome <- df_outcome[df_outcome$State == state,]
df_outcome$rank <- NA
if (outcome == 'heart attack'){
df_outcome$rank <- rank(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack , na.last = "keep")
} else if (outcome == 'heart failure'){
df_outcome$rank <- rank(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure , na.last = "keep")
} else {
df_outcome$rank <- rank(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia , na.last = "keep")
}
answer <- df_outcome[which(df_outcome$rank == num),1]
return (answer)
}
## Return hospital name in that state with the given rank
## 30-day death rate
}
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", 4)
num = 4
## Read outcome data
df_outcome <- read.csv("C:/Users/victo/Documents/Githut/Johns-Hopkins-DataScience/outcome-of-care-measures.csv", colClasses = 'character')
df_outcome <- df_outcome[,c(2,7,11,17,23)]
df_outcome[3:5] <- lapply(df_outcome[3:5], as.numeric) ## Fix numeric values
#Subset by state
df_outcome <- df_outcome[df_outcome$State == state,]
df_outcome$rank <- NA
if (outcome == 'heart attack'){
df_outcome$rank <- rank(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack , na.last = "keep")
} else if (outcome == 'heart failure'){
df_outcome$rank <- rank(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure , na.last = "keep")
} else {
df_outcome$rank <- rank(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia , na.last = "keep")
}
state <- 'TX'
outcome <- 'heart failure'
num = 4
## Read outcome data
df_outcome <- read.csv("C:/Users/victo/Documents/Githut/Johns-Hopkins-DataScience/outcome-of-care-measures.csv", colClasses = 'character')
df_outcome <- df_outcome[,c(2,7,11,17,23)]
df_outcome[3:5] <- lapply(df_outcome[3:5], as.numeric) ## Fix numeric values
#Subset by state
df_outcome <- df_outcome[df_outcome$State == state,]
df_outcome$rank <- NA
if (outcome == 'heart attack'){
df_outcome$rank <- rank(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack , na.last = "keep")
} else if (outcome == 'heart failure'){
df_outcome$rank <- rank(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure , na.last = "keep")
} else {
df_outcome$rank <- rank(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia , na.last = "keep")
}
answer <- df_outcome[which(df_outcome$rank == num),1]
View(df_outcome)
answer <- df_outcome[which(df_outcome$rank == 4),1]
answer <- df_outcome[which(df_outcome$rank == 4.0),1]
answer <- df_outcome[which(df_outcome$rank == 4.0),1]
answer <- df_outcome[which(df_outcome$rank < 2),1]
answer <- df_outcome[which(df_outcome$rank < 4),1]
answer <- df_outcome[which(df_outcome$rank == 4),1]
df_outcome$rank <- rank(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
answer <- df_outcome[which(df_outcome$rank == 4),1]
if (outcome == 'heart attack'){
df_outcome$rank <- rank(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack , na.last = "keep")
} else if (outcome == 'heart failure'){
df_outcome$rank <- rank(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
} else {
df_outcome$rank <- rank(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia , na.last = "keep")
}
answer <- df_outcome[which(df_outcome$rank == 4),1]
answer <- df_outcome[which(df_outcome$rank == 4),]
answer
View(df_outcome)
x <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
y <- c(1, 4, 5, 5, 2, 8 ,8, 1,3, 3)
z <- c(0.2, 0.8, 0.5, 0.4, 0.2, 0.1, 0.1, 0.7, 0.3, 0.3)
m <- cbind(x=x,y=y, z=z)
x <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
y <- c(1, 4, 5, 5, 2, 8 ,8, 1,3, 3)
z <- c(0.2, 0.8, 0.5, 0.4, 0.2, 0.1, 0.1, 0.7, 0.3, 0.3)
m <- cbind(x=x,y=y, z=z)
m
order(order(y, z, runif(length(y))))
rank(y)
rank(y, method = 'min')
rank(y)
rank(y, ties.method = "random")
a <- c('a','b','c')
rank(a)
rank(z,y)
rank(y,z)
## Read outcome data
df_outcome <- read.csv("C:/Users/victo/Documents/Githut/Johns-Hopkins-DataScience/outcome-of-care-measures.csv", colClasses = 'character')
df_outcome <- df_outcome[,c(2,7,11,17,23)]
df_outcome[3:5] <- lapply(df_outcome[3:5], as.numeric) ## Fix numeric values
#Subset by state
df_outcome <- df_outcome[df_outcome$State == state,]
df_outcome$rank <- NA
lenght(df_outcome)
lenght(df_outcome$Hospital.Name)
length(df_outcome)
length(df_outcome$rank)
#Subset by state
df_outcome <- df_outcome[df_outcome$State == state,]
state <- 'TX'
outcome <- 'heart failure'
num = 4
#Subset by state
df_outcome <- df_outcome[df_outcome$State == state,]
df_outcome$rank <- NA
df_outcome$rank <- order(order(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, df_outcome$Hospital.Name, runif(length(df_outcome$rank))))
answer <- df_outcome[which(df_outcome$rank == 4),]
answer
df_outcome$rank <- order(order(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure, df_outcome$Hospital.Name, runif(length(df_outcome$rank))))
answer <- df_outcome[which(df_outcome$rank == 4),]
return (answer)
answer
rankhospital <- function(state, outcome, num) {
## Read outcome data
df_outcome <- read.csv("C:/Users/victo/Documents/Githut/Johns-Hopkins-DataScience/outcome-of-care-measures.csv", colClasses = 'character')
df_outcome <- df_outcome[,c(2,7,11,17,23)]
df_outcome[3:5] <- lapply(df_outcome[3:5], as.numeric) ## Fix numeric values
## Check state and outcome valid
if (!outcome %in% c('heart attack', 'heart failure', 'pneumonia')){
return(warning('Invalid Outcome'))
}else if (!state %in% df_outcome$State){
return(warning('Invalid State'))
}else{
#Subset by state
df_outcome <- df_outcome[df_outcome$State == state,]
df_outcome$rank <- NA
if (outcome == 'heart attack'){
df_outcome$rank <- order(order(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, df_outcome$Hospital.Name, runif(length(df_outcome$rank))))
} else if (outcome == 'heart failure'){
df_outcome$rank <- order(order(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure, df_outcome$Hospital.Name, runif(length(df_outcome$rank))))
} else {
df_outcome$rank <- order(order(df_outcome$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia, df_outcome$Hospital.Name, runif(length(df_outcome$rank))))
}
answer <- df_outcome[which(df_outcome$rank == num),1]
return (answer)
}
## Return hospital name in that state with the given rank
## 30-day death rate
}
library(XML)
library(xml2)
library(xml2)
xmlTreeParse()
detach("package:xml2", unload = TRUE)
install.packages("XML", type = "binary")
library(XML)
fileUrl <- 'https://www.w3schools.com/xml/simple.xml'
xmlTreeParse(fileUrl)
fileUrl <- "https://www.w3schools.com/xml/simple.xml"
xmlTreeParse(fileUrl)
xmlTreeParse(fileUrl,useInternal=T)
doc <- xmlTreeParse(fileUrl,useInternal=T)
library(XML)
fileUrl <- "https://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl,useInternal=T)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl,useInternal=T)
doc <- xmlTreeParse(fileUrl)
fileUrl <- "https://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(sub("s", "", fileURL), useInternal = TRUE)
doc <- xmlTreeParse(sub("s", "", fileUrl), useInternal = TRUE)
doc <- xmlTreeParse(sub("s", "", fileUrl), useInternalNodes =  = TRUE)
doc <- xmlTreeParse(sub("s", "", fileUrl), useInternalNodes = TRUE)
doc <- xmlTreeParse(fileUrl,useInternalNodes = TRUE)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl,useInternalNodes = TRUE)
getwd()
setwd('C:/Users/victo/Documents/Githut/Johns-Hopkins-DataScience/Exploratory analysis')
download.file(fileUrl, destfile = "foo.xml")
doc <- xmlTreeParse("foo.xml", useInternal=TRUE)
doc
doc[[1]]
doc[1]
xmlRoot(doc)
xmlRoot(doc)
root_node <- xmlRoot(doc)
xmlName(root_node)
root_node[1]
root_node[[1]]
root_node$food
root_node$food
xmlName(root_node)
root_node
doc[1]
root_node[[1]]
root_node[[1]][1]
root_node[[1]][[1]]
root_node[[1]]$name
root_node[[1]]
root_node[[1]][[1]]
xmlValue(root_node)
xmlSApply(root_node, xmlValue)
xmlSApply(root_node, xmlValue)
xmlSApply(root_node,'//name',xmlValue)
xpathApplyS(root_node,'//name',xmlValue)
xpathApply(root_node,'//name',xmlValue)
xpathApply(root_node,'//price',xmlValue)
s <- xpathApply(root_node,'//price',xmlValue)
s[1]
for (i %in% s) {
print(i)
}
for (i in s) {
print(i)
}
print(as.integer(i)
}
print(as.integer(i))
print(as.numeric(i))
print((i))
for (i in s) {
print((i))
}
for (i in s) {
print((as.numeric(i)))
}
"caio"[1]
x<- "caio"
x[1]
x[[1]]
x[[2]]
s <- xpathApply(doc,'//price',xmlValue)
s
s <- xpathApply(root_node,'//price',xmlValue)
s <- xpathApply(doc,'//price',xmlValue)
# Get all names
names <- xpathApply(root_node,'//name',xmlValue)
prices1 <- xpathApply(root_node,'//price',xmlValue)
prices2 <- xpathApply(doc,'//price',xmlValue)
library(jsonlite)
jsonData <- fromJSON('https://api.github.com/users/jtleek/repos')
names(jsonData)
# Get all names
names1 <- xpathApply(root_node,'//name',xmlValue)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
download.file(fileUrl, destfile = "foo.xml")
doc <- xmlTreeParse("foo.xml", useInternal=TRUE)
root_node <- xmlRoot(doc)
xmlName(root_node)
names(root_node)
names(root_node$food)
names(doc$food)
names(jsonData)
names(jsonData$id)
names(jsonData$forks_url)
names(jsonData$owner)
names(jsonData$owner$login)
jsonData$owner$login
test <- fromJSON(jsonData)
jsondata
jsonData
### Data Table faster than Dataframe
library(data.table)
df <- data.frame(x=rnorm(9),y=rep(c('a','b','c'),each=3),z = rnorm(9))
df
dt <- data.table(x=rnorm(9),y=rep(c('a','b','c'),each=3),z = rnorm(9))
dt
#subset
df[2,]
dt[2,]
df[df$x > 1,]
dt[dt$y < 2,]
dt[dt$z < 2,]
dt[dt$z < 1,]
dt[c(1,2)]
df[c(1,2)]
df[c(1,2),]
dt[c(1,2),]
dt[c(1,2)]
dt[,c(1,2)]
dt <- data.table(x=rnorm(9),y=rep(c('a','b','c'),each=3),z = rnorm(9))
dt[,c(1,2)]
dt[,list(mean),sum(z)]
dt[,list(mean(x),sum(z))]
dt[,(mean(x),sum(z))]
dt[,c(mean(x),sum(z))]
dt[,list(mean(x),sum(z))]
dt[,table(x)]
dt[,table(y)]
# Add column
dt[,w = z^2]
# Add column
dt[,w <- z^2]
dt
# Add column
dt[,w :- z^2]
# Add column
dt[,w := z^2]
dt
dt[,m := {tmp <- (z+x); log(tmp + 2)}]
dt[,m := {tmp <- (z+x); log(tmp + 2)}]
dt[,m := {tmp <- (z+x); log2(tmp + 2)}]
dt
df[,w := z^2]
df <- data.frame(x=rnorm(9),y=rep(c('a','b','c'),each=3),z = rnorm(9))
df[,w := z^2]
dt[,w := z^2]
cbind(dt,dt)
cbind(dt,df)
rbind(dt,df)
rbind(dt,dt)
dt[,a := x>2]
dt
dt[,b := mean(x+z), by=a]
dt
# Using keys to merge
dt1 <- data.table(x=c('a','b','c','dt1'),y = 1:4)
# Using keys to merge
dt1 <- data.table(x=c('a','b','c','dt1'),y = 1:4)
dt2 <- data.table(x = c('b','c','d','dt2'), z = 8:12)
dt2 <- data.table(x = c('b','c','d','dt2'), z = 8:11)
setkey(dt1,x)
setkey(dt2,x)
merge(dt1,dt2)
getwd
getwd()
df <- read.table('getdata_data_ss06hid.csv')
df <- read.table('getdata_data_ss06hid.csv')
View(df)
df <- fread('getdata_data_ss06hid.csv')
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv', destfile = 'quiz1.csv')
df <- fread('quiz1.csv')
names(df)
df[df$VAL > 1000]
df[df$VAL > 1000]
df[df$VAL > 1000,]
df[df$VAL >= 14,]
# VAl more than 1000
big <- df[df$VAL >= 14,]
length(big)
length(big$RT)
# VAl more than 1000
big <- df[df$VAL == 24,]
length(big$RT)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx', destfile = 'quiz1.xlsx'')
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx', destfile = 'quiz1.xlsx')
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx', destfile = 'quiz1.xlsx')
#
library(xlsx)
install.packages("xlsx")
#
library(xlsx)
df <- read.xlsx('quiz.xlsx', sheetIndex = 1)
df <- read.xlsx('quiz1.xlsx', sheetIndex = 1)
df <- read.xlsx('quiz1.xlsx', sheetIndex = 1)
df <- read.xlsx('quiz1.xlsx', sheetIndex = 1, header = T)
df <- read.xlsx('quiz1.xlsx', sheetIndex = 1, header = T)
df <- read.xlsx("quiz1data2.xlsx", sheetIndex = 1, colIndex = col, rowIndex = row, header = TRUE)
df <- read.xlsx("quiz1.xlsx", sheetIndex = 1, colIndex = col, rowIndex = row, header = TRUE)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx', destfile = 'quiz1.xlsx', mode = 'wb')
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx', destfile = 'Quiz2.xlsx', mode = 'wb')
df <- read.xlsx("quiz1.xlsx", sheetIndex = 1, colIndex = col, rowIndex = row, header = TRUE)
df[18:23,7:15]
dat <- df[18:23,7:15]
sum(dat$Zip*dat$Ext,na.rm=T)
df <- read.xlsx("quiz1.xlsx", sheetIndex = 1, header = TRUE)
dat <- df[18:23,7:15]
sum(dat$Zip*dat$Ext,na.rm=T)
df <- read.xlsx("quiz1.xlsx", sheetIndex = 1, header = TRUE)
df
dat <- read.xlsx("quiz1.xlsx", sheetIndex = 1, colIndex = 7:15, rowIndex = 18:23, header = TRUE)
dat <- read.xlsx("quiz1.xlsx", sheetIndex = 1, colIndex = 7:15, rowIndex = 18:23, header = TRUE)
sum(dat$Zip*dat$Ext,na.rm=T)
df <- read.xlsx("quiz1.xlsx", sheetIndex = 1, header = TRUE)
df <- df[18:23,7:15]
sum(df$Zip*dat$Ext,na.rm=T)
dat
df
sum(dat$Zip*dat$Ext,na.rm=T)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml', destfile = 'Quiz3.xlsx', mode = 'wb')
df <- read.xlsx("Quiz3.xlsx", sheetIndex = 1, header = TRUE)
df <- read.xlsx("Quiz3.xlsx", sheetIndex = 1, header = TRUE)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml', destfile = 'Quiz3.xml')
doc <- xmlTreeParse("Quiz3.xml", useInternal=TRUE)
root_node <- xmlRoot(doc)
root_node
root_node$row
zips <- xpathApply(root_node,"//zipcode",xmlValue)
length(zips)
zips <- zips[zips == '21231']
zips
length(zips)
zips <- xpathApply(root_node,"//zipcode",xmlValue)
length(zips)
zips <- zips[zips == '21231']
length(zips)
zips[1]
